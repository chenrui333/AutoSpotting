---
  AWSTemplateFormatVersion: "2010-09-09"
  Description: "Notification stack for spot termination event"
  Parameters:
    AutoSpottingLambdaARN:
      Description: "The ARN of the main AutoSpotting Lambda function"
      Type: "String"
  Resources:
    TerminationEventRuleFunction:
      Type: AWS::Lambda::Function
      Properties:
        Description: "Invokes the main AutoSpotting Lambda function on spot instance termination notification"
        Handler: "index.handler"
        Runtime: "python3.6"
        Timeout: "300"
        Environment:
          Variables:
            AUTOSPOTTING_LAMBDA_ARN:
              Ref: "AutoSpottingLambdaARN"
        Role:
          Fn::GetAtt:
            - "LambdaExecutionRole"
            - "Arn"
        Code:
          ZipFile: |
            from boto3 import client
            from json import dumps
            from os import environ
            from sys import exc_info
            from traceback import print_exc

            lambda_arn = (environ['AUTOSPOTTING_LAMBDA_ARN'])

            def parse_region_from_arn(arn):
                return arn.split(':')[3]

            def handler(event, context):
                try:
                    svc = client('lambda', region_name=parse_region_from_arn(lambda_arn))
                    response = svc.invoke(
                        FunctionName=lambda_arn,
                        LogType='Tail',
                        Payload=json.dumps(event),
                    )
                    print(response)
                except:
                    print_exc()
                    print("Unexpected error:", exc_info()[0])

    LambdaExecutionRole:
      Properties:
        AssumeRolePolicyDocument:
          Statement:
            -
              Action: "sts:AssumeRole"
              Effect: "Allow"
              Principal:
                Service:
                  - "lambda.amazonaws.com"
        Path: "/lambda/"
      Type: "AWS::IAM::Role"
    LambdaPolicy:
      Properties:
        PolicyDocument:
          Statement:
            -
              Action:
                - "lambda:InvokeFunction"
                - "logs:CreateLogGroup"
                - "logs:CreateLogStream"
                - "logs:PutLogEvents"
              Effect: "Allow"
              Resource: "*"
        PolicyName: "LambdaPolicy"
        Roles:
          -
            Ref: "LambdaExecutionRole"
      Type: "AWS::IAM::Policy"
    AutoSpotTerminationNotificationTopic:
      Type: "AWS::SNS::Topic"
      Properties:
        DisplayName: "autospotting-termination-notification-topic"
        Subscription:
          -
            Endpoint: !GetAtt TerminationEventRuleFunction.Arn
            Protocol: "lambda"
    LambdaPermissionAutoSpotTerminationNotificationTopic:
      Type: "AWS::Lambda::Permission"
      Properties:
        Action: "lambda:InvokeFunction"
        FunctionName:
          Ref: "TerminationEventRuleFunction"
        Principal: "sns.amazonaws.com"
        SourceArn:
          Ref: "AutoSpotTerminationNotificationTopic"
    SNSTopicPolicyAutoSpotTeminationEventRule:
      Type: "AWS::SNS::TopicPolicy"
      Properties:
        PolicyDocument:
          Statement:
            -
              Action: "sns:Publish"
              Effect: "Allow"
              Principal:
                Service: "events.amazonaws.com"
              Resource:
                Ref: "AutoSpotTerminationNotificationTopic"
          Version: "2012-10-17"
        Topics:
          -
            Ref: "AutoSpotTerminationNotificationTopic"
    AutoSpotTeminationEventRule:
      Type: "AWS::Events::Rule"
      Properties:
        Description: "This rule is triggered 2 minutes before AWS terminates a spot instance"
        EventPattern:
          detail-type:
            - "EC2 Spot Instance Interruption Warning"
          source:
            - "aws.ec2"
        State: "ENABLED"
        Targets:
          -
            Id: "AutoSpottingTerminationEventGenerator"
            Arn:
              Ref: "AutoSpotTerminationNotificationTopic"

